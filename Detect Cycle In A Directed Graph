#include<unordered_map>
#include<list>
bool cycledfs(int node,unordered_map<int,bool>&visited, unordered_map<int,bool>&dfsvis,unordered_map<int,list<int>>&adj){
    visited[node]=1;
     dfsvis[node]=1;
    for(auto neighbour:adj[node]){
        if(!visited[neighbour]){
            bool cycle=cycledfs(neighbour,visited,dfsvis,adj);
            if(cycle){
                return true;
            }
        }
        else if(dfsvis[neighbour]){
            return true;
        }
    }
    dfsvis[node]=false;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
         adj[u].push_back(v);                
    }
    unordered_map<int,bool>visited;
    unordered_map<int,bool>dfsvis;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            bool ans=cycledfs(i,visited,dfsvis,adj);
            if(ans){
                return true;
            }
        }
    }
    return false;
}
