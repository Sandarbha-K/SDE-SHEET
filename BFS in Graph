#include<unordered_map>
#include<queue>
#include<set>
#include<list>
void makeadj(unordered_map<int,set<int>>&adjnode,vector<pair<int, int>>&edges){
    for(int i=0;i<edges.size();i++){ 
        int u=edges[i].first;
        int v=edges[i].second;
        
        adjnode[u].insert(v);
        
        adjnode[v].insert(u);
        
    }
}
void bfs(unordered_map<int,set<int>>&adjnode, unordered_map<int,bool>&visited,vector<int>&ans,int node){
    queue<int>q;
    q.push(node);
    visited[node]=1;
    
    while(!q.empty()){
        int frontnode=q.front();
        q.pop();
        
        ans.push_back(frontnode);
        for(auto i:adjnode[frontnode]){ 
        if(!visited[i]){
            q.push(i);
            visited[i]=1;
        }
    }
}

}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int,set<int>>adjnode;
     unordered_map<int,bool>visited;
    vector<int>ans;
    
    makeadj(adjnode,edges);
    
    for(int i=0;i<vertex;i++){
        if(!visited[i]){ 
            bfs(adjnode,visited,ans,i);
        }
    }
    return ans;
}
